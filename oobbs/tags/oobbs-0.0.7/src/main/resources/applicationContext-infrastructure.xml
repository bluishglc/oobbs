<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:aop="http://www.springframework.org/schema/aop" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            			   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            			   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            			   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
       default-lazy-init="true">
	
	
	<!-- Gloabal Spring Setting ============================================================================= -->
	
	<!--
		The <context:spring-configured/> element instructs Spring to inject
		dependencies for the classes annotated with the @Configurable
		annotation. Behind the scenes, it instantiates an aspect and
		configures it.
	-->
	<context:spring-configured />
	
	<!--
		Most domain objects inject their components by annotations!
	-->
	<context:annotation-config />
	
	<!-- 
		Auto-detects classes(components) and register them as beans.
	-->
    <context:component-scan base-package="oobbs"/>
	
	<bean class="oobbs.infrastructure.appcontext.ApplicationBeanPostProcessor"/>
	
	<!-- Resource Setting =================================================================================== -->
    
    <!-- For mail settings and future properties files -->
    
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:mail.properties</value>
            </list>
        </property>
    </bean>
	
	<!-- Data Source -->

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="100"/>
        <property name="maxWait" value="1000"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="defaultAutoCommit" value="true"/>
    </bean>
    
    <!-- Hibernate SessionFactory -->
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
        <property name="entityInterceptor" ref="entityInterceptor"/>        
        <!--property name="hibernateProperties">
            <value>

            </value>
        </property-->
    </bean>
    
    <bean id="entityInterceptor" class="oobbs.domainmodel.util.EntityInterceptor"/>

	<!--
		NOTE:
		You can actually omit the 'transaction-manager' attribute in the
		<tx:annotation-driven/> and <tx:advice/> tag if the bean name of the
		PlatformTransactionManager that you want to wire in has the name
		'transactionManager'. If the PlatformTransactionManager bean that you
		want to dependency inject has any other name, then you have to be
		explicit and use the 'transaction-manager' attribute
	-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>   
       
    <!-- Persistence ========================================================================================= -->
    
    <bean id="dataAccessSupport" class="oobbs.infrastructure.persistence.HibernateBasedDataAccessSupport" abstract="true">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
    
    <!-- Forum -->

    <bean id="forumGroupRepository" parent="dataAccessSupport" class="oobbs.infrastructure.persistence.forum.ForumGroupHibernateRepository"/>
    
    <bean id="forumRepository" parent="dataAccessSupport" class="oobbs.infrastructure.persistence.forum.ForumHibernateRepository"/>
    
    <bean id="threadRepository" parent="dataAccessSupport" class="oobbs.infrastructure.persistence.forum.ThreadHibernateRepository"/>
    
    <bean id="postRepository" parent="dataAccessSupport" class="oobbs.infrastructure.persistence.forum.PostHibernateRepository"/>
    
    <bean id="forumThreads" parent="dataAccessSupport" class="oobbs.infrastructure.persistence.forum.ForumThreadHibernateCollection" scope="prototype"/>
    
    <bean id="forumPosts" parent="dataAccessSupport" class="oobbs.infrastructure.persistence.forum.ForumPostHibernateCollection" scope="prototype"/>
    
    <bean id="threadPosts" parent="dataAccessSupport" class="oobbs.infrastructure.persistence.forum.ThreadPostHibernateCollection" scope="prototype"/>
    
 	<!-- User -->
	
    <bean id="userRepository" parent="dataAccessSupport" class="oobbs.infrastructure.persistence.user.UserHibernateRepository"/>

    <bean id="roleRepository" parent="dataAccessSupport" class="oobbs.infrastructure.persistence.user.RoleHibernateRepository"/>
    
	<!-- ShortMessage -->
  	
  	<bean id="shortMessageService" class="oobbs.domainmodel.shortmessage.ShortMessageService">

  	</bean>
  	
  	<!-- ThreadPublish -->
  	
  	<bean id="threadPublishService" class="oobbs.domainmodel.threadpublish.ThreadPublishService">
  		<property name="shortMessageService" ref="shortMessageService"/>
  	</bean>    
    
    
</beans>
